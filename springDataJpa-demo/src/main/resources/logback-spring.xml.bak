<?xml version="1.0" encoding="UTF-8"?>
<configuration xmlns="http://ch.qos.logback/xml/ns/logback-spring"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://ch.qos.logback/xml/ns/logback-spring https://raw.githubusercontent.com/borgille/logback-spring-XSD/master/src/main/xsd/logback-spring.xsd">
	
	<include resource="org/springframework/boot/logging/logback/defaults.xml" />
	<include resource="org/springframework/boot/logging/logback/console-appender.xml" />
	<include resource="org/springframework/boot/logging/logback/file-appender.xml" />

	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />

	<property name="LOG_FILE_NAME" 				value="demo" />
	<property name="ERR_LOG_FILE_NAME" 			value="demo-error" />
	<property name="LOG_PATH" 	  				value="${logging.file.path}"/><!-- application.properties 정의 -->
	<property name="LOG_PATTERN" 				value="%d{yy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36}:%line - %msg%n" />
	<property name="LOG_PATTERN_CONSOLE" 		value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}){${LOG_LEVEL_COLOR:-%clr(%5p)}} %clr(---){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx" />
	<property name="LOG_LEVEL_ROOT"     		value="DEBUG" />

	<!-- Console Appender 콘솔 로그 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<charset>UTF-8</charset>
			<pattern>${LOG_PATTERN_CONSOLE}</pattern>
		</encoder>
	</appender>

	<!-- File Appender 어플리케이션 파일로그 FixedWindowRollingPolicy 방식
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}_%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>30</maxIndex>
        </rollingPolicy>

        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>10MB</maxFileSize>
        </triggeringPolicy>
    </appender>
    -->

	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<charset>UTF-8</charset>
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/%d{yyyy/yyyyMMdd}/${LOG_FILE_NAME}_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--
                아카이브에 저장 유지할 로그 파일의 개수을 지정합니다.
                예를들어 rollover를 1개월 마다 하며 값을 6으로 지정했다면, 6개월의 히스토리가 남게됩니다.
                다음 월의 파일이 아카이브 될 경우 오래된 파일이 삭제됩니다.
                30일 초과 시 삭제.
            -->
			<maxHistory>30</maxHistory>
			<!--
                로그 파일 아카이브 저장소의 최대크기를 지정합니다.
                totalSizeCap을 초과한다면 가장 오래된 파일이 삭제됩니다.
                maxHistory와 함께 쓰일 경우 1순위로 maxHistory에 대하여 처리된 후 totalSizeCap 이 적용됩니다.
            -->
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
	</appender>

	<appender name="ERR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<charset>UTF-8</charset>
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>

		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/%d{yyyy/yyyyMMdd}/${ERR_LOG_FILE_NAME}_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--
                아카이브에 저장 유지할 로그 파일의 개수을 지정합니다.
                예를들어 rollover를 1개월 마다 하며 값을 6으로 지정했다면, 6개월의 히스토리가 남게됩니다.
                다음 월의 파일이 아카이브 될 경우 오래된 파일이 삭제됩니다.
                30일 초과 시 삭제.
            -->
			<maxHistory>30</maxHistory>
			<!--
                로그 파일 아카이브 저장소의 최대크기를 지정합니다.
                totalSizeCap을 초과한다면 가장 오래된 파일이 삭제됩니다.
                maxHistory와 함께 쓰일 경우 1순위로 maxHistory에 대하여 처리된 후 totalSizeCap 이 적용됩니다.
            -->
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
	</appender>

	<!-- File Appender 어플리케이션 에러 파일로그 FixedWindowRollingPolicy 방식
    <appender name="ERR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}_%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>30</maxIndex>
        </rollingPolicy>

        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>10MB</maxFileSize>
        </triggeringPolicy>
    </appender>
    -->

	<root level="${LOG_LEVEL_ROOT}">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="FILE" 	/>
		<appender-ref ref="ERR_LOG" />
	</root>

	<logger name="org.springframework.boot" level="DEBUG" 	additivity="false"/>
	<logger name="org.springframework.web"  level="DEBUG" 	additivity="false"/>
	<logger name="org.thymeleaf" 			level="OFF" 	additivity="false"/>
	<logger name="org.springframework.security.web"  level="DEBUG"/>

	<logger name="jdbc.sqltiming" 		    level="INFO"/>
	<logger name="jdbc" 				    level="OFF"/>
	<logger name="jdbc.sqlonly" 		    level="OFF"/>
	<logger name="jdbc.audit" 			    level="OFF"/>
	<logger name="jdbc.resultset" 		    level="OFF"/>
	<logger name="jdbc.resultsettable" 	    level="OFF"/>
	<logger name="jdbc.connection" 		    level="OFF"/>

	<!-- DB Connection Pool 관련 -->
	<logger name="com.zaxxer.hikari.pool.PoolBase" 		level="DEBUG"/>
	<logger name="com.zaxxer.hikari.pool.HikariPool" 	level="DEBUG"/>
	<logger name="com.zaxxer.hikari.HikariDataSource" 	level="DEBUG"/>
	<logger name="com.zaxxer.hikari.HikariConfig" 		level="DEBUG"/>

	<logger name="org.springframework.security.web.FilterChainProxy" level="OFF" />
	<!-- org.apache.http.wire 패키지의 로그 레벨을 OFF로 설정하여 출력하지 않도록 함 -->
	<logger name="org.apache.http.wire" level="OFF" />

</configuration>